import phonenumbers
from phonenumbers import NumberParseException
from phonenumbers.phonenumber import PhoneNumber
from telegram import (ForceReply, InlineKeyboardButton, InlineKeyboardMarkup,
                      KeyboardButton, ParseMode, ReplyKeyboardMarkup,
                      ReplyKeyboardRemove, Update)
from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, ConversationHandler, Filters,
                          MessageHandler)

from load import DATABASE_URL, keyboard_row_divider, logger, escape_characters
from payment_handler import start_invoice


def set_person_info(person_data, user):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ–ª–æ–≤–µ–∫–∞."""
    if 'last_name' not in person_data:
        person_data['last_name'] = '`–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é`'
        if not user['last_name'] is None:
            person_data['last_name'] = user['last_name']

    if 'first_name' not in person_data:
        person_data['first_name'] = '`–í–≤–µ–¥–∏—Ç–µ –∏–º—è`'
        if not user['first_name'] is None:
            person_data['first_name'] = user['first_name']

    if 'middle_name' not in person_data:
        person_data['middle_name'] = '`–í–≤–µ–¥–∏—Ç–µ –æ—Ç—á–µ—Å—Ç–≤–æ`'
        if not user['middle_name'] is None:
            person_data['middle_name'] = user['middle_name']

    if 'date_birth' not in person_data:
        person_data['date_birth'] = '`–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è`'
        if not user['date_birth'] is None:
            person_data['date_birth'] = user['date_birth']

    if 'passport' not in person_data:
        person_data['passport'] = '`–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞`'
        if not user['passport'] is None:
            person_data['passport'] = user['passport']

    if 'telephone' not in person_data:
        person_data['telephone'] = '`–í–≤–µ–¥–∏—Ç–µ ‚Ññ —Ç–µ–ª–µ—Ñ–æ–Ω–∞`'
        if not user['telephone'] is None:
            person_data['telephone'] = user['telephone']

    person_data['telephone'] = escape_characters(str(person_data['telephone']))


def acceptance_agreement(update: Update, context: CallbackContext):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –ø–æ –ü–î."""
    inl_keyboard = InlineKeyboardMarkup(
        [
            [
                InlineKeyboardButton('üìÑ –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º',
                                     callback_data='AGREEMENT')],
            [
                InlineKeyboardButton('üëç –°–æ–≥–ª–∞—Å–µ–Ω',
                                     callback_data='YES'),
                InlineKeyboardButton('üëé –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω',
                                     callback_data='NO')
            ]
        ]
    )

    update.message.reply_text(
        '‚ùóÔ∏è*–í–Ω–∏–º–∞–Ω–∏–µ*‚ùóÔ∏è\n'
        '`–°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–æ–Ω–∞ –æ—Ç 27 –∏—é–ª—è 2006 –≥. ‚Ññ 152-–§–ó'
        '¬´–û –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö¬ª –í—ã –¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞'
        ' –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.`',
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=inl_keyboard
    )
    return 'inline_button_agreement'


def inline_button_agreement(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å –ü–î."""
    bot = update.effective_message.bot
    query = update.callback_query

    if query.data == 'YES':
        return show_persion_data(update, context)
    elif query.data == 'NO':
        bot.answerCallbackQuery(
            callback_query_id=update.callback_query.id,
            text='‚õîÔ∏è –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –í–∞–º–∏ —Ä–∞–±–æ—Ç—É'
                 ' –±–µ–∑ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ —Å–±–æ—Ä –ü–î.',
            show_alert=True)
    elif query.data == 'AGREEMENT':
        with open('agreement.pdf', 'rb') as document:
            bot.send_document(
                chat_id=update._effective_chat.id,
                document=document)


def show_persion_data(update: Update, context: CallbackContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ–ª–æ–≤–µ–∫–∞."""
    if 'telephone' in dict(context.user_data):
        telephone = PhoneNumber()
        try:
            telephone = phonenumbers.parse(
                update.message.text, _check_region=False)
        except NumberParseException:
            pass

        if phonenumbers.is_valid_number(telephone):
            context.user_data['telephone'] = update.message.text
        else:
            update.message.reply_text('–í—ã –≤–≤–µ–ª–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä !',
                                      reply_markup=ReplyKeyboardRemove())
            return get_telephone(update, context)

    reply_keyboard = list(keyboard_row_divider(['–î–∞', '–ù–µ—Ç']))

    set_person_info(context.user_data, update.effective_user)
    user_data = context.user_data

    update.effective_message.reply_text(
        f"_–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ_:\n"
        f"*–§–∞–º–∏–ª–∏—è:* `{user_data['last_name']}`\n"
        f"*–ò–º—è:* `{user_data['first_name']}`\n"
        f"*–û—Ç—á–µ—Å—Ç–≤–æ:* `{user_data['middle_name']}`\n"
        f"*–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:* `{user_data['date_birth']}`\n"
        f"*–ü–∞—Å–ø–æ—Ä—Ç:* `{user_data['passport']}`\n"
        f"*‚òéÔ∏è:* `{user_data['telephone']}`\n",
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            input_field_placeholder='–î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã ?',
            resize_keyboard=True,)
    )

    return 'process_answer_yes_no'


def process_answer_yes_no(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    text = update.message.text

    if text == '–î–∞':
        update.message.reply_text('–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã !\n–ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –æ–ø–ª–∞—Ç–µ',
                                  reply_markup=ReplyKeyboardRemove())

        del context.user_data['telephone']
        start_invoice(update, context)
        return ConversationHandler.END
    else:
        update.message.reply_text(
            '–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è:',
            reply_markup=ForceReply(force_reply=True,
                                    input_field_placeholder='–§–∞–º–∏–ª–∏—è',
                                    selective=True)
        )
        # TODO –≤–µ—Ä–Ω—É—Ç—å get_surname
        return 'get_passport'


def get_surname(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–º–∏–ª–∏–∏."""
    update.message.reply_text(
        '–í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è:',
        reply_markup=ForceReply(force_reply=True,
                                input_field_placeholder='–§–∞–º–∏–ª–∏—è',
                                selective=True)
    )
    return 'get_user_name'


def get_user_name(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏."""
    context.user_data['last_name'] = update.message.text
    update.message.reply_text(
        '–í–∞—à–µ –∏–º—è:',
        reply_markup=ForceReply(force_reply=True,
                                input_field_placeholder='–ò–º—è',
                                selective=True)
    )
    return 'get_middle_name'


def get_middle_name(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Å—Ç–≤–∞."""
    context.user_data['first_name'] = update.message.text
    update.message.reply_text(
        '–í–∞—à–µ –æ—Ç—á–µ—Å—Ç–≤–æ:',
        reply_markup=ForceReply(force_reply=True,
                                input_field_placeholder='–û—Ç—á–µ—Å—Ç–≤–æ',
                                selective=True)
    )
    return 'get_date_birth'


def get_date_birth(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è."""
    context.user_data['middle_name'] = update.message.text
    update.message.reply_text(
        '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:',
        reply_markup=ForceReply(force_reply=True,
                                input_field_placeholder='01.22.1900',
                                selective=True)
    )
    return 'get_passport'


def get_passport(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å–ø–æ—Ä—Ç–∞."""
    context.user_data['date_birth'] = update.message.text
    update.message.reply_text(
        '–î–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞:',
        reply_markup=ForceReply(force_reply=True,
                                input_field_placeholder='XX XX YYYYYY',
                                selective=True)
    )
    return 'select_input_phone'


def select_input_phone(update: Update, context: CallbackContext):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    context.user_data['passport'] = update.message.text

    enter_phone = KeyboardButton('–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é ‚òéÔ∏è',
                                 request_contact=False)
    send_phone = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç ‚òéÔ∏è',
                                request_contact=True)

    reply_keyboard = list(keyboard_row_divider([enter_phone, send_phone], 1))

    update.message.reply_text(
        '–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ?',
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard,
            one_time_keyboard=True,
            input_field_placeholder='',
            resize_keyboard=True,)
    )

    return 'get_telephone'


def get_telephone(update: Update, context: CallbackContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    contact = update.effective_message.contact
    if contact:
        contact = update.effective_message.contact
        update.message.text = contact.phone_number
        return show_persion_data(update, context)

    update.message.reply_text(
        '–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:',
        reply_markup=ForceReply(force_reply=True,
                                input_field_placeholder='–¢–µ–ª–µ—Ñ–æ–Ω',
                                selective=True)
    )
    return 'show_persion_data'


def get_handler_person():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤."""
    return ConversationHandler(
        entry_points=[MessageHandler(
            Filters.regex('^–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é$'),
            acceptance_agreement)],
        states={
            "inline_button_agreement": [
                CallbackQueryHandler(
                    inline_button_agreement
                )
            ],
            "show_persion_data": [
                MessageHandler(
                    Filters.text,
                    show_persion_data
                )
            ],
            "get_surname": [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    get_surname
                )
            ],
            "get_user_name": [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    get_user_name
                )
            ],
            "get_middle_name": [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    get_middle_name
                )
            ],
            "get_date_birth": [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    get_date_birth
                )
            ],
            "get_passport": [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    get_passport
                )
            ],
            "select_input_phone": [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    select_input_phone
                )
            ],
            "get_telephone": [
                MessageHandler(
                    (Filters.text | Filters.contact) & ~Filters.command,
                    get_telephone
                )
            ],
            "process_answer_yes_no": [
                MessageHandler(
                    Filters.text & ~Filters.command,
                    process_answer_yes_no
                )
            ],
        },
        fallbacks=[CommandHandler("cancel", acceptance_agreement)]
    )
